import logging
from os import access
from tabnanny import check
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import sqlite3
import sched, time
from datetime import datetime
import re
from apscheduler.schedulers.background import BackgroundScheduler
from threading import Timer
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import requests
import json

admin = []


def get_api_token():
    conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
    cursos123 = conn_citys.cursor()
    api_token = cursos123.execute("SELECT value FROM config WHERE key = 'api_token'").fetchall()
    for i in api_token[0]:
    	print(i)
    return str(i)


s = sched.scheduler(time.time, time.sleep)
API_TOKEN = get_api_token()

bot = Bot(token=API_TOKEN,parse_mode=types.ParseMode.HTML)
bot_tele = telebot.TeleBot(API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

conn = sqlite3.connect('mytest.db', check_same_thread=False)
cursor = conn.cursor()


exchange = []
exchange_address = []

class settings(StatesGroup):
    reserve = State()  
    reserve_id = State() 
    adress_crypto = State()
    procent = State()
    address_postup = State()
    trades_id = State()
    rewiews_text = State()
    rewiews_user = State()
    rewiews_rating = State()
    rewiews_finish = State()
    rewiews_finish = State()
    seo = State()
    seo_id = State()
    config = State()
    config_id = State()
    confirm = State()


keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
button_1 = "üî∞–†–µ–∑–µ—Ä–≤—ãüî∞"
keyboard.add(button_1)
button_2 = "üôå–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ üôå"
keyboard.add(button_2)
button_3 = "üëõ–ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤üëõ"
keyboard.add(button_3)
button_4 = "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –û—Ç–∑—ã–≤ üí¨"
keyboard.add(button_4)
button_5 = "‚ùá–ù–∞—Å—Ç—Ä–æ–∏—Ç—å SEO‚ùá"
keyboard.add(button_5)
button_6 = "‚öô –ù–∞—Å—Ç—Ä–æ–∏—Ç—å config ‚öô"
keyboard.add(button_6)


@dp.message_handler(commands='start')
async def welcome(message: types.Message):
    if message["from"]["id"] in admin:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é.", reply_markup=keyboard)
        scheduler = BackgroundScheduler()
        scheduler.add_job(check_new_trades, 'interval', seconds=10)
        scheduler.start()
    else:
    	await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é.\n–í–æ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π id: {message.from_user.id}")
    # await message.answer(message)


@dp.message_handler(commands='stat')
async def stats(message: types.Message):
    if message.from_user.id in admin:
        today = datetime.today()
        date = today.strftime(f"%m.%d.%y")  
        three_days = datetime.today() - timedelta(days=3)
        date_3 = three_days.strftime(f"%m.%d.%y")
        week_day = datetime.today() - timedelta(days=7)
        date_7 = week_day.strftime(f"%m.%d.%y")
        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
        cursor_citys = conn_citys.cursor()
        value_users_today = cursor_citys.execute(f"SELECT id FROM users WHERE date_registration = '{date}'").fetchall()
        value_users_three_days = cursor_citys.execute(f"SELECT id FROM users WHERE date_registration BETWEEN '{date_3}' AND '{date}'").fetchall()
        value_users_seven_days = cursor_citys.execute(f"SELECT id FROM users WHERE date_registration BETWEEN '{date_7}' AND '{date}'").fetchall()
        trades = cursor_citys.execute(f"SELECT id FROM trades").fetchall()
        await bot.send_message(message.from_user.id, f"–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å: {len(value_users_today)}, –∑–∞ 3 –¥–Ω—è: {len(value_users_three_days)}, –∑–∞ –Ω–µ–¥–µ–ª—é: {len(value_users_seven_days)}\n –í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤: {len(trades)}")
    else:
    	await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@dp.message_handler(Text(equals="üôå–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ üôå"))
async def procent(message: types.Message):  
    if message.from_user.id in admin:
        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
        cursor_citys = conn_citys.cursor()
        procentik = cursor_citys.execute("SELECT procent_per_summa FROM settings").fetchone()
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        markup1.add(types.KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å"))
        await bot.send_message(message.from_user.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–≤–µ–Ω {procentik[0]}%",reply_markup=markup1)
        await settings.procent.set()
    else:
    	await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

# –û—Ç–∑—ã–≤ –Ω–∞—á–∞–ª–æ
@dp.message_handler(Text(equals="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –û—Ç–∑—ã–≤ üí¨"))
async def procent(message: types.Message):
    if message.from_user.id in admin:
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        markup1.add(types.KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å"))
        await bot.send_message(message.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—é—â–µ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π",reply_markup=markup1)
        await settings.rewiews_user.set()
    else:
    	await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@dp.message_handler(state = settings.rewiews_user)
async def user_add(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    if message.text == '–ó–∞–∫—Ä—ã—Ç—å':
	        await bot.send_message(message.from_user.id, '–ó–∞–∫—Ä—ã—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', reply_markup=keyboard)
	        await state.finish()
	    else:
	        rewiews_user = message.text
	        await state.update_data(rewiews_user=rewiews_user)
	        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")
	        await settings.rewiews_text.set()
	else:
		await message.answer(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@dp.message_handler(state = settings.rewiews_text)
async def user_add(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    if message.text == '–ó–∞–∫—Ä—ã—Ç—å':
	        await bot.send_message(message.from_user.id, '–ó–∞–∫—Ä—ã—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', reply_markup=keyboard)
	        await state.finish()
	    else:
	        rewiews_text = message.text
	        await state.update_data(rewiews_text=rewiews_text)
	        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞ –æ—Ç 1 –¥–æ 5")
	        await settings.rewiews_rating.set()
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@dp.message_handler(state = settings.rewiews_rating)
async def user_add(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    if message.text == '–ó–∞–∫—Ä—ã—Ç—å':
	        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
	        await bot.send_message(message.from_user.id, '–ó–∞–∫—Ä—ã—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', reply_markup=keyboard)
	        await state.finish()
	    else:
	        rewiews_rating = message.text
	        data = await state.get_data()
	        await state.update_data(rewiews_rating=rewiews_rating)
	        text = data.get("rewiews_text")
	        user = data.get("rewiews_user")
	        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
	        button_1 = "–°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤"
	        keyboard.add(button_1)
	        button_2 = "–ó–∞–∫—Ä—ã—Ç—å"
	        keyboard.add(button_2)
	        await bot.send_message(message.from_user.id, f"–û—Ç–∑—ã–≤:{text} \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user} \n–†–µ–π—Ç–∏–Ω–≥: {rewiews_rating}", reply_markup=keyboard)
	        await settings.rewiews_finish.set()
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@dp.message_handler(state = settings.rewiews_finish)
async def user_add(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    if message.text == '–ó–∞–∫—Ä—ã—Ç—å':
	        await bot.send_message(message.from_user.id, '–ó–∞–∫—Ä—ã—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', reply_markup=keyboard)
	        await state.finish()
	    else:
	        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	        cursos123 = conn_citys.cursor()
	        data = await state.get_data()
	        text = data.get("rewiews_text")
	        user = data.get("rewiews_user")
	        rating = data.get("rewiews_rating")
	        print(text)
	        print(user)
	        print(rating)
	        today = datetime.today()
	        date = today.strftime(f"%m.%d.%y")
	        users = cursos123.execute(
	            "INSERT INTO reviews (date, content, rating, user) VALUES (?, ?, ?, ?);", [date, text, rating,user]).fetchall()
	        conn_citys.commit()
	        await bot.send_message(message.from_user.id, '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
	                               reply_markup=keyboard)
	        await state.finish()
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
# –û—Ç–∑—ã–≤ –∫–æ–Ω–µ—Ü


@dp.message_handler(Text(equals="‚ùá–ù–∞—Å—Ç—Ä–æ–∏—Ç—å SEO‚ùá"))
async def enable(message: types.Message):
	if message.from_user.id in admin:
		conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
		cursor_citys = conn_citys.cursor()
		cursor_citys.execute("SELECT id,key FROM seo")
		currency = []
		while True:
			row = cursor_citys.fetchone()
			if row == None:
				break
			else:
				currency.append(row[1])
		keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
		buttons = []
		for i, item in enumerate(currency):
			print(i)
			num = types.InlineKeyboardButton(text=f'{item}', callback_data=f'{i}_seo')
			buttons.insert(i, num)
		keyboard.add(*buttons)
		await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π!", reply_markup=keyboard)
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")



@dp.message_handler(Text(equals="‚öô –ù–∞—Å—Ç—Ä–æ–∏—Ç—å config ‚öô"))
async def enable(message: types.Message):
	if message.from_user.id in admin:
	    conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	    cursor_citys = conn_citys.cursor()
	    cursor_citys.execute("SELECT id,key FROM config")
	    currency = []
	    while True:
	        row = cursor_citys.fetchone()
	        if row == None:
	            break
	        else:
	            currency.append(row[1])
	    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
	    buttons = []
	    for i, item in enumerate(currency):
	            print(i)
	            num = types.InlineKeyboardButton(text=f'{item}', callback_data=f'{i}_config')
	            buttons.insert(i, num)
	    keyboard.add(*buttons)
	    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π!", reply_markup=keyboard)
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")



@dp.message_handler(state = settings.procent)
async def user_add(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    if message.text == '–ó–∞–∫—Ä—ã—Ç—å':
	        await bot.send_message(message.from_user.id, '–ó–∞–∫—Ä—ã—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏', reply_markup=keyboard)
	        await state.finish()
	    else:
	        try:
	            procent = message.text
	            await state.update_data(procent=procent)
	            radius = await state.get_data('radius_city')
	            cursor.execute(f"""UPDATE settings SET procent_per_summa = {float(radius['procent'])}""")
	            conn.commit()
	            await state.finish()
	            await bot.send_message(message.from_user.id, "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
	        except:
	            await bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω –ø—Ä–æ—Ü–µ–Ω—Ç, –¥–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å!")
	            await state.finish()
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")



@dp.message_handler(Text(equals="–ó–∞–∫—Ä—ã—Ç—å"))
async def swith_pocket(message: types.Message):
	if message.from_user.id in admin:
		await bot.send_message(message.from_user.id, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")



@dp.message_handler(Text(equals="üëõ–ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤üëõ"))
async def swith_pocket(message: types.Message): 
	if message.from_user.id in admin:  
	    conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	    cursor_citys = conn_citys.cursor()
	    cursor_citys.execute("SELECT currency FROM reserve_currency")
	    currency = []
	    while True:
	        row = cursor_citys.fetchone()
	        if row == None:
	            break
	        else:
	            currency.append(row[0])    
	    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
	    buttons = []
	    for i, item in enumerate(currency):
	            print(i)
	            num = types.InlineKeyboardButton(text=f'{item}', callback_data=f'{i}')
	            buttons.insert(i, num)
	    keyboard.add(*buttons)
	    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–∞–ª—é—Ç!", reply_markup=keyboard)
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    

@dp.message_handler(state = settings.adress_crypto)
async def bla_bla(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	    cursor_citys = conn_citys.cursor()
	    if message.text == '–ó–∞–∫—Ä—ã—Ç—å':
	        await bot.send_message(message.from_user.id, '–ó–∞–∫—Ä—ã—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', reply_markup=keyboard)
	        await state.finish()
	    else:
	        async with state.proxy() as data:
	            reserve = message.text
	            await state.update_data(adress_crypto=reserve)
	            setting_frequency = await state.get_data('adress_crypto')
	            print(setting_frequency)   
	            cursor_citys.execute(f"UPDATE reserve_currency SET adress_crypto = '{setting_frequency['adress_crypto']}' WHERE id_currency = {setting_frequency['reserve_id']}")
	            conn_citys.commit()
	            name_currency = cursor_citys.execute(f"SELECT currency FROM reserve_currency WHERE id_currency = {setting_frequency['reserve_id']}").fetchone()
	            for i in admin:
	                await bot.send_message(i, f"–ö–æ—à–µ–ª–µ–∫ {name_currency[0]} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω")
	                await state.finish()
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


# —Ä–µ–∑–µ—Ä–≤
@dp.message_handler(Text(equals="üî∞–†–µ–∑–µ—Ä–≤—ãüî∞"))
async def enable(message: types.Message):   
	if message.from_user.id in admin:
	    conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	    cursor_citys = conn_citys.cursor()
	    cursor_citys.execute("SELECT currency, reserve FROM reserve_currency")
	    currency = []
	    while True:
	        row = cursor_citys.fetchone()
	        if row == None:
	            break
	        else:
	            currency.append(row[0]+' '+str(row[1]))    
	    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
	    buttons = []
	    for i, item in enumerate(currency):
	            print(i)
	            num = types.InlineKeyboardButton(text=f'{item}', callback_data=f'{i}_reserve')
	            buttons.insert(i, num)
	    keyboard.add(*buttons)
	    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–∞–ª—é—Ç!", reply_markup=keyboard)
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@dp.callback_query_handler(lambda call: True)
async def delete_admin(call: types.CallbackQuery, state: FSMContext):
	if message.from_user.id in admin:
	    print(call.data)
	    if re.findall("reserve", call.data):
	        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	        cursor_citys = conn_citys.cursor()
	        cursor_citys.execute("SELECT id_currency FROM reserve_currency")
	        id = []
	        while True:
	                row = cursor_citys.fetchone()
	                if row == None:
	                    break
	                else:
	                    id.append(row[0])
	        call_data = re.sub("[\_\rreserve]+", '', call.data)
	        await state.update_data(reserve_id=id[int(call_data)])
	        await settings.reserve.set()
	        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
	        markup1.add(types.KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å"))
	        await bot.send_message(call.from_user.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–µ: 11.00!", reply_markup=markup1)
	        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
	    if re.findall("seo", call.data):
	        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	        cursor_citys = conn_citys.cursor()
	        cursor_citys.execute("SELECT id FROM seo")
	        id = []
	        while True:
	                row = cursor_citys.fetchone()
	                if row == None:
	                    break
	                else:
	                    id.append(row[0])
	        call_data = re.sub("[\_\rseo]+", '', call.data)
	        await state.update_data(seo_id=id[int(call_data)])
	        await settings.seo.set()
	        value = cursor_citys.execute("SELECT value FROM seo WHERE id=?",[id[int(call_data)]]).fetchone()
	        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
	        markup1.add(types.KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å"))
	        await bot.send_message(call.from_user.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–¢–µ–∫—É—â–µ–µ –Ω–∞—á–µ–Ω–∏–µ: {value[0]}", reply_markup=markup1)
	        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
	    if re.findall("config", call.data):
	        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	        cursor_citys = conn_citys.cursor()
	        cursor_citys.execute("SELECT id FROM config")
	        id = []
	        while True:
	                row = cursor_citys.fetchone()
	                if row == None:
	                    break
	                else:
	                    id.append(row[0])
	        call_data = re.sub("[\_\rconfig]+", '', call.data)
	        await state.update_data(config_id=id[int(call_data)])
	        await settings.config.set()
	        value = cursor_citys.execute("SELECT value FROM config WHERE id=?",[id[int(call_data)]]).fetchone()
	        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
	        markup1.add(types.KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å"))
	        await bot.send_message(call.from_user.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–¢–µ–∫—É—â–µ–µ –Ω–∞—á–µ–Ω–∏–µ: {value[0]}", reply_markup=markup1)
	        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
	    elif re.findall('status', call.data):
	        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	        cursos123 = conn_citys.cursor()
	        users = cursos123.execute("SELECT id FROM trades").fetchall()
	        print(call.data)
	        call_datas =  re.sub("_\w+", '', call.data)

	        print(call_datas)
	        id_xd = cursos123.execute(f"SELECT id_xd FROM trades WHERE id = '{call_datas}'")
	        for id in id_xd:
	            print(id[0])
	            try:
	                exchange_address.remove(id[0])
	                exchange.remove(id[0])
	            except:
	                print("id –Ω–µ –Ω–∞–π–¥–µ–Ω")
	        for i in users:
	            crypto = cursos123.execute(f"SELECT from_crypto FROM trades WHERE id = '{call_datas}'")
	            for j in crypto:
	                print(j[0])
	                crypto_address_base = cursos123.execute(f"SELECT adress_crypto FROM reserve_currency WHERE currency = '{j[0]}'").fetchall()
	                for c in crypto_address_base:
	                    print(c)
	                    await state.update_data(trades_id=call_datas)
	                    await settings.address_postup.set()
	                    await bot.send_message(call.from_user.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω–∞ –ø–æ—Å—Ç—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {j[0]} ,–ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å—Å –∏–∑ –±–∞–∑—ã:\n<code>{c[0]}</code>" , parse_mode="HTML")
	                    break
	                break
	            break
	        await bot.delete_message(call.from_user.id, message_id=call.message.message_id)

	    elif re.findall('otmena', call.data):
	        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	        cursos123 = conn_citys.cursor()
	        users = cursos123.execute("SELECT id FROM trades").fetchall()
	        print(call.data)
	        call_datas =  re.sub("_\w+", '', call.data)
	        print(call_datas)
	        id_xd = cursos123.execute(f"SELECT id_xd FROM trades WHERE id = '{call_datas}'")

	        for id in id_xd:
	            print(id[0])
	            try:
	                exchange_address.remove(id[0])
	                exchange.remove(id[0])
	            except:
	                print("id –Ω–µ –Ω–∞–π–¥–µ–Ω")
	        for i in users:
	            cursos123.execute(f"UPDATE trades SET status = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞' WHERE id = '{call_datas}'")
	            conn_citys.commit()
	            await bot.delete_message(call.from_user.id, message_id=call.message.message_id)
	            await bot.send_message(call.from_user.id, "–û–±–º–µ–Ω –∑–∞–∫—Ä—ã—Ç!", reply_markup=keyboard)


	    elif re.findall('confirmed', call.data):
	        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	        cursos123 = conn_citys.cursor()
	        users = cursos123.execute("SELECT id FROM trades").fetchall()
	        print(call.data)
	        call_datas =  re.sub("_\w+", '', call.data)
	        print(call_datas)
	        for i in users:
	            cursos123.execute(f"UPDATE trades SET status = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' WHERE id = '{call_datas}'")
	            conn_citys.commit()
	        await bot.send_message(call.from_user.id, f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", reply_markup=keyboard)
	        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
	    elif call.data == 'yes':
	        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
	    else:
	        conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	        cursor_citys = conn_citys.cursor()
	        cursor_citys.execute("SELECT id_currency FROM reserve_currency")
	        id = []
	        while True:
	                row = cursor_citys.fetchone()
	                if row == None:
	                    break
	                else:
	                    id.append(row[0])
	        await state.update_data(reserve_id=id[int(call.data)])
	        await settings.adress_crypto.set()
	        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
	        markup1.add(types.KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å"))
	        asb = await state.get_data('adress_crypto')
	        print(asb)
	        name_cur = cursor_citys.execute(f"SELECT adress_crypto FROM reserve_currency WHERE id_currency = {asb['reserve_id']}").fetchone()
	        name_cur_full = cursor_citys.execute(f"SELECT currency FROM reserve_currency WHERE id_currency = {asb['reserve_id']}").fetchone()
	        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
	        await bot.send_message(call.from_user.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å {name_cur_full[0]}, —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫:  <code>{name_cur[0]}</code>", reply_markup=markup1, parse_mode="HTML")



@dp.message_handler(state = settings.address_postup)
async def address_postup_chage(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
	    cursor = conn_citys.cursor()
	    address_postup = message.text
	    await state.update_data(address_postup=address_postup)
	    setting_address = await state.get_data()
	    address = setting_address.get('address_postup')
	    trades_id = setting_address.get('trades_id')
	    print("address "+address)
	    print("trades "+trades_id)
	    # cur.execute("select * from people where name_last=:who and age=:age", {"who": who, "age": age})
	    cursor.execute(f"""UPDATE trades SET adress_postup = '{address}' WHERE id = '{trades_id}'""").fetchone()
	    cursor.execute(f"""UPDATE trades SET status = '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã' WHERE id = '{trades_id}'""").fetchone()
	    cursor.execute(f"""UPDATE trades SET status = '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã' WHERE id = '{trades_id}'""").fetchone()
	    conn.commit()

	    user = cursor.execute(f"SELECT user FROM trades WHERE id = '{trades_id}'").fetchone()
	    payments_user = cursor.execute(f"SELECT payments_user FROM trades WHERE id = '{trades_id}'").fetchone()
	    name = cursor.execute(f"Select fname from users where email = '{user[0]}'").fetchone()
	    trade = cursor.execute(
	        f"SELECT id, user, from_crypto, status, payable, to_crypto, payments_user, summa_postup, adress_postup, id_xd FROM trades WHERE id = '{trades_id}'").fetchall()
	    print(user)
	    print(name)
	    print(trade)

	    if trade:
	        for item1 in trade:
	            check_user_trade = cursor.execute(f"SELECT id FROM trades WHERE user = '{item1[1]}'").fetchall()
	            cursor.execute(f"UPDATE users SET trades = {len(check_user_trade)} WHERE email = '{item1[1]}'")
	            text = ""
	            text = "‚ôªÔ∏è–û–±–º–µ–Ω ‚Ññ {0} \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {1} \n–û–±–º–µ–Ω–æ–≤ —Å–æ–≤–µ—Ä—à–∏–ª: {2} \n–í–∞–ª—é—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {3} \n–°—É–º–º–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {4} \n–û–±–º–µ–Ω—è—Ç—å –Ω–∞: {5} \n–°—É–º–º–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {6}\n–ê–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: {7}".format(
	                item1[9] + 1, item1[1], len(check_user_trade), item1[2], item1[7], item1[5], item1[4], item1[8])
	            conn_citys.commit()
	            URL = 'https://api.telegram.org/bot' + API_TOKEN + '/sendMessage'
	            print(str(item1[0]))

	            reply_markup = {
	                "inline_keyboard": [[
	                    {
	                        "text": '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥',
	                        "callback_data": f'{str(item1[0])}_confirmed'
	                    },
	                    {
	                        "text": '–û—Ç–∫–∞–∑–∞—Ç—å',
	                        "callback_data": f'{str(item1[0])}_otmena'
	                    }

	                ]]
	            }
	            data = {'chat_id': message.from_user.id, 'text': f"–ê–¥—Ä–µ—Å ({address}) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω,–ø—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∞–¥—Ä–µ—Å {payments_user[0]}.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.", 'reply_markup': json.dumps(reply_markup)}
	            r = requests.post(URL, data=data)
	        await state.finish()
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")



@dp.message_handler(state = settings.reserve)
async def user_add(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    async with state.proxy() as data:
	        if message.text == '–ó–∞–∫—Ä—ã—Ç—å':
	            await bot.send_message(message.from_user.id,'–ó–∞–∫—Ä—ã—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', reply_markup=keyboard)
	            await state.finish()
	        else:
	            name = cursor.execute(f"SELECT currency FROM reserve_currency WHERE id_currency = {data['reserve_id']}").fetchone()
	            print(data['reserve_id'])
	            reserve = message.text
	            await state.update_data(reserve=reserve)
	            setting_frequency = await state.get_data('reserve')
	            try:
	                cursor.execute(f"UPDATE reserve_currency SET reserve ={(setting_frequency['reserve'])} WHERE id_currency = {int(data['reserve_id'])}")
	                print(setting_frequency['reserve'])
	                conn.commit()
	                await state.finish()
	                name = cursor.execute(f"SELECT currency FROM reserve_currency WHERE id_currency = {data['reserve_id']}").fetchone()
	                await bot.send_message(message.from_user.id, f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {name[0]} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
	            except:
	                await bot.send_message(message.from_user.id, f"–§–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã–π!", reply_markup=keyboard)
	                await state.finish()
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

#–∫–æ–Ω–µ—Ü —Ä–µ–∑–µ—Ä–≤–∞


@dp.message_handler(state = settings.seo)
async def user_add(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    async with state.proxy() as data:
	        if message.text == '–ó–∞–∫—Ä—ã—Ç—å':
	            await bot.send_message(message.from_user.id, '–ó–∞–∫—Ä—ã—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
	                                   reply_markup=keyboard)
	            await state.finish()
	        else:
	            name = cursor.execute(
	                f"SELECT key FROM seo WHERE id = {data['seo_id']}").fetchone()
	            print(data['seo_id'])
	            value = message.text
	            await state.update_data(seo=value)
	            seo = await state.get_data('value')
	            print(seo)
	            cursor.execute(
	                f"UPDATE seo SET value = ? WHERE id = ?", [seo['seo'], int(data['seo_id'])])
	            print(seo['seo'])
	            conn.commit()
	            await state.finish()
	            name = cursor.execute(
	                f"SELECT key FROM seo WHERE id = {data['seo_id']}").fetchone()
	            await bot.send_message(message.from_user.id, f"{name[0]} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",reply_markup=keyboard)
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


@dp.message_handler(state = settings.config)
async def user_add(message: types.Message, state: FSMContext):
	if message.from_user.id in admin:
	    async with state.proxy() as data:
	        if message.text == '–ó–∞–∫—Ä—ã—Ç—å':

	            await bot.send_message(message.from_user.id, '–ó–∞–∫—Ä—ã—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
	                                   reply_markup=keyboard)
	            await state.finish()
	        else:
	            name = cursor.execute(
	                f"SELECT key FROM config WHERE id = {data['config_id']}").fetchone()
	            print(data['config_id'])
	            value = message.text
	            await state.update_data(config=value)
	            config = await state.get_data('value')
	            print(config)
	            cursor.execute(
	                f"UPDATE config SET value = ? WHERE id = ?", [config['config'], int(data['config_id'])])
	            print(config['config'])
	            conn.commit()
	            await state.finish()
	            name = cursor.execute(
	                f"SELECT key FROM config WHERE id = {data['config_id']}").fetchone()
	            await bot.send_message(message.from_user.id, f"{name[0]} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",reply_markup=keyboard)
	else:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


def check_new_trades():
    print("lol")
    check_trades = []
    admins_id = []
    conn_citys = sqlite3.connect('mytest.db', check_same_thread=False)
    cursos123 = conn_citys.cursor()
    users = cursos123.execute("SELECT id_xd FROM trades").fetchall()
    admin_id = cursos123.execute("SELECT value FROM config WHERE key = 'admins_id'").fetchall()
    check_trades.append(users)
    admins_id.append(admin_id)
    for i in admins_id[0]:
    	txt = i[0]
    	x = txt.split(",")
    	admin.clear()
    	for j in x:
    		admin.append(int(j)) 
    	print(admin)
    URL = 'https://api.telegram.org/bot' + API_TOKEN + '/sendMessage'
    for item in check_trades[0]:
        user = cursos123.execute(f"SELECT user FROM trades WHERE id_xd = '{item[0]}'").fetchone()
        name = cursos123.execute(f"Select fname from users where email = '{user[0]}'").fetchone()
        trade = cursos123.execute(f"SELECT id, user, from_crypto, status, payable, to_crypto, payments_user, summa_postup, adress_postup, id_xd FROM trades WHERE id_xd = '{item[0]}' AND status = '–û–∂–∏–¥–∞–Ω–∏–µ' AND otpravka = 0").fetchall()
        trade1 = cursos123.execute(f"SELECT id, user, from_crypto, status, payable, to_crypto, payments_user, summa_postup, adress_postup, id_xd FROM trades WHERE id_xd = '{item[0]}' AND status = '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã' ").fetchall()
        if trade:
            for item1 in trade:
                if item1[9] in exchange:
                    print('Yes'+item1[9])
                else:
                    exchange.append(item1[9])
                    exchange_address.append(item1[9])
                    print(item1[9])
                check_user_trade = cursos123.execute(f"SELECT id FROM trades WHERE user = '{item1[1]}'").fetchall()
                cursos123.execute(f"UPDATE users SET trades = {len(check_user_trade)} WHERE email = '{item1[1]}'")
                text = ""
                text = "‚ôªÔ∏è–û–±–º–µ–Ω ‚Ññ {0} \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {1} \n–û–±–º–µ–Ω–æ–≤ —Å–æ–≤–µ—Ä—à–∏–ª: {2} \n–í–∞–ª—é—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {3} \n–°—É–º–º–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {4} \n–û–±–º–µ–Ω—è—Ç—å –Ω–∞: {5} \n–°—É–º–º–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {6}".format(
                    item1[9]+1, item1[1], len(check_user_trade), item1[2], item1[7], item1[5], item1[4])
                conn_citys.commit()
                for i in admin:
                    reply_markup = {
                        "inline_keyboard": [[
                            {
                                "text": '–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
                                "callback_data": f'{str(item1[0])}_status'
                            },
                            {
                                "text": '–û—Ç–∫–∞–∑–∞—Ç—å',
                                "callback_data": f'{str(item1[0])}_otmena'
                            }
                        ]]
                    }
                    data = {'chat_id': i, 'text': text, 'reply_markup': json.dumps(reply_markup)}
                    r = requests.post(URL, data=data)
                    cursos123.execute(f"UPDATE trades SET otpravka = 1 WHERE id = '{item1[0]}'")
                    conn_citys.commit()
                    check_trades.clear()

        else:
            if trade1:
                for item1 in trade1:
                    if item1[9] in exchange_address:
                        exchange_address.remove(item1[9])
                        for chat_id in admin:
                            text = "‚ôªÔ∏è–û–±–º–µ–Ω ‚Ññ {0} –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ —Å–∞–π—Ç".format(item1[9] + 1, )
                            data = {'chat_id': chat_id, 'text': text}
                            r = requests.post(URL, data=data)
            else:
                user = cursos123.execute(f"SELECT user FROM trades WHERE id_xd = '{item[0]}'").fetchone()
                name = cursos123.execute(f"Select fname from users where email = '{user[0]}'").fetchone()
                trade_finish = cursos123.execute(
                    f"SELECT id, user, from_crypto, status, payable, to_crypto, payments_user, summa_postup, adress_postup, id_xd FROM trades WHERE id_xd = '{item[0]}' AND otpravka = 1 AND status = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' ").fetchall()
                trade_finish2 = cursos123.execute(
                    f"SELECT id, user, from_crypto, status, payable, to_crypto, payments_user, summa_postup, adress_postup, id_xd FROM trades WHERE id_xd = '{item[0]}' AND otpravka = 1 AND status = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞' ").fetchall()

                if trade_finish:
                    for item1 in trade_finish:
                        if item1[9] in exchange:
                            exchange.remove(item1[9])
                            for chat_id in admin:
                                text = "‚ôªÔ∏è–û–±–º–µ–Ω ‚Ññ {0} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ —Å–∞–π—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω".format(item1[9]+1, )
                                data = {'chat_id': chat_id, 'text': text}
                                r = requests.post(URL, data=data)
                if trade_finish2:
                    for item1 in trade_finish2:
                        if item1[9] in exchange:
                            exchange.remove(item1[9])
                            for chat_id in admin:
                                text = "‚ôªÔ∏è–û–±–º–µ–Ω ‚Ññ {0} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ —Å–∞–π—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–º–µ–Ω–µ–Ω".format(item1[9] + 1, )
                                data = {'chat_id': chat_id, 'text': text}
                                r = requests.post(URL, data=data)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    bot_tele.polling(none_stop=True, interval=0)